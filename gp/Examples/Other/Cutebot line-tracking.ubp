module main
author wwj718
version 2 0 
description ''
variables running 

script 50 50 {
whenButtonPressed 'A'
running = (booleanConstant true)
}

script 242 50 {
whenButtonPressed 'B'
running = (booleanConstant false)
cutebot_stopWheels
}

script 50 137 {
whenStarted
running = (booleanConstant false)
forever {
  if running {
    if (cutebot_seesLine false true) {cutebot_setWheelSpeed 40 15}
    if (cutebot_seesLine true false) {cutebot_setWheelSpeed 15 40}
    if (cutebot_seesLine true true) {cutebot_setWheelSpeed 40 40}
  } else {
    cutebot_stopWheels
  }
}
}


module Cutebot Output
author wwj718
version 1 6 
depends 'Distance (HC-SR04)' NeoPixel 
choices cutebot_side left right 
choices cutebot_light left right both 
description 'Cutebot is a rear-drive smart car driven by dual high speed motors.

It features two RGB headlights, left and right line-following sensors, an ultrasonic distance sensor, and two downward-facing NeoPixels.

Add the IR Remote library to use the IR receiver (pin 16).

The Cutebot can work with the AILens library.

https://www.elecfreaks.com/learn-en/microbitKit/smart_cutebot/cutebot_car.html'

  spec ' ' 'cutebot_setWheelSpeed' 'Cutebot set wheel left _ right _ (-100 to 100)' 'num num' 100 -100
  spec ' ' 'cutebot_stopWheels' 'Cutebot stop wheels'
  space
  spec ' ' 'cutebot_setServo' 'Cutebot set servo _ to _ degrees (-90 to 90)' 'menu.range:1-2 num' 1 90
  spec ' ' 'cutebot_setServoSpeed' 'Cutebot set servo _ to speed _ (-100 to 100)' 'menu.range:1-2 num' 1 100
  space
  spec ' ' 'cutebot_setHeadlightColor' 'Cutebot set headlight _ to _' 'menu.cutebot_light color' 'both'
  spec ' ' 'cutebot_setNeopixels' 'Cutebot set NeoPixel _ to _' 'menu.cutebot_light color' 'both'
  space
  spec 'r' 'cutebot_lineSensor' 'Cutebot _ line sensor' 'menu.cutebot_side' 'left'
  spec 'r' 'cutebot_seesLine' 'Cutebot sees line on left _ right _' 'bool bool' true true
  spec 'r' 'cutebot_distance' 'Cutebot distance (cm)'
  space
  spec ' ' '_cutebot_sendCmd' '_cutebot_sendCmd _' 'str' 'aList'

to '_cutebot_sendCmd' aList {
  local 'cutebotAddr' 16
  '[sensors:i2cSetClockSpeed]' 100000
  '[sensors:i2cWrite]' cutebotAddr aList
  '[sensors:i2cSetClockSpeed]' 400000
}

to cutebot_distance {
  local 'trigger_pin' 8
  local 'echo_pin' 12
  return ('distance (cm)' trigger_pin echo_pin)
}

to cutebot_lineSensor side {
  comment 'Return true if a black line is detected on the given side.'
  local 'left_pin' 13
  local 'right_pin' 14
  if (side == 'left') {
    return (not (digitalReadOp left_pin))
  } else {
    return (not (digitalReadOp right_pin))
  }
}

to cutebot_seesLine leftSide rightSide {
  return (and (leftSide == (cutebot_lineSensor 'left')) (rightSide == (cutebot_lineSensor 'right')))
}

to cutebot_setHeadlightColor which color {
  local 'r' ((color >> 16) & 255)
  local 'g' ((color >> 8) & 255)
  local 'b' ((color >> b) & 255)
  local 'left_LED' 4
  local 'right_LED' 8
  if (which == 'left') {
    '_cutebot_sendCmd' ('[data:makeList]' left_LED r g b)
  } (which == 'right') {
    '_cutebot_sendCmd' ('[data:makeList]' right_LED r g b)
  } else {
    '_cutebot_sendCmd' ('[data:makeList]' left_LED r g b)
    '_cutebot_sendCmd' ('[data:makeList]' right_LED r g b)
  }
}

to cutebot_setNeopixels which_NeoPixel color {
  if (0 == _np_pixels) {neoPixelAttach 2 15}
  if (which_NeoPixel == 'left') {
    atPut 1 _np_pixels color
  } (which_NeoPixel == 'right') {
    atPut 2 _np_pixels color
  } else {
    atPut 1 _np_pixels color
    atPut 2 _np_pixels color
  }
  '_NeoPixel_update'
}

to cutebot_setServo servo value {
  comment 'servo (number) is one of: 1 2
value range of -90 to 90 maps to the full range of the servo'
  servo = (maximum 1 (minimum servo 2))
  value = (maximum -90 (minimum value 90))
  '_cutebot_sendCmd' ('[data:makeList]' (servo + 4) ('[misc:rescale]' value 90 -90 0 180) 0 0)
}

to cutebot_setServoSpeed servo value {
  comment 'servo (number) is one of: 1 2
value range of -100 to 100 maps to the full range of the servo'
  servo = (maximum 1 (minimum servo 2))
  value = (maximum -100 (minimum value 100))
  '_cutebot_sendCmd' ('[data:makeList]' (servo + 4) ('[misc:rescale]' value 100 -100 0 180) 0 0)
}

to cutebot_setWheelSpeed left_wheel_speed right_wheel_speed {
  comment 'speed (number): -100-100
direction: 1 = backward, 2 = forward'
  local 'left_direction' 2
  local 'right_direction' 2
  if (left_wheel_speed < 0) {
    left_direction = 1
    left_wheel_speed = (0 - left_wheel_speed)
  }
  if (right_wheel_speed < 0) {
    right_direction = 1
    right_wheel_speed = (0 - right_wheel_speed)
  }
  left_wheel_speed = (minimum left_wheel_speed 100)
  right_wheel_speed = (minimum right_wheel_speed 100)
  '_cutebot_sendCmd' ('[data:makeList]' 1 left_direction left_wheel_speed 0)
  '_cutebot_sendCmd' ('[data:makeList]' 2 right_direction right_wheel_speed 0)
}

to cutebot_stopWheels {
  cutebot_setWheelSpeed 0 0
}


module 'Distance (HC-SR04)' Input
author 'Joan Guillén & Josep Ferràndiz'
version 1 2 
tags sensor 'hc-sr04' distance ultrasound 
description 'Support for the HC-SR04 ultrasound distance sensor.'
variables _sr04_last 

  spec 'r' 'distance (cm)' 'distance (cm) trigger _ echo _' 'num num' 2 4
  spec 'r' 'sr04_distanceOnePin' 'distance (cm) pin _' 'num' 0

to 'distance (cm)' trig ech {
  comment 'Contributed by Joan Guillén and Josep Ferràndiz'
  digitalWriteOp trig false
  waitMicros 2
  digitalWriteOp trig true
  waitMicros 50
  digitalWriteOp trig false
  local 'start' (microsOp)
  waitUntil (or (not (digitalReadOp ech)) (((microsOp) - start) > 23320))
  waitUntil (or (digitalReadOp ech) (((microsOp) - start) > 23320))
  if (((microsOp) - start) > 23320) {
    comment 'Distance sensor not ready; return the last distance reading'
    return _sr04_last
  }
  comment 'Pulse sent. Measure time until echo is detected.'
  start = (microsOp)
  waitUntil (or (not (digitalReadOp ech)) (((microsOp) - start) > 23320))
  _sr04_last = ((10 * ((microsOp) - start)) / 583)
  comment 'Leave some time for reverberations to die away.'
  waitMillis 10
  if (_sr04_last == 0) {
    zeroCount += 1
  }
  return _sr04_last
}

to sr04_distanceOnePin pin {
  return ('distance (cm)' pin pin)
}


module NeoPixel Output
author MicroBlocks
version 1 9 
description 'Control NeoPixel (WS2812) RGB LED strips and rings.
'
variables _np_pixels 

  spec ' ' 'neoPixelAttach' 'attach _ LED NeoPixel strip to pin _ : has white _' 'num auto bool' 10 '' false
  spec ' ' 'setNeoPixelColors10' 'set NeoPixels _ _ _ _ _ _ _ _ _ _' 'color color color color color color color color color color'
  spec ' ' 'clearNeoPixels' 'clear NeoPixels'
  spec ' ' 'neoPixelSetAllToColor' 'set all NeoPixels color _' 'color'
  spec ' ' 'setNeoPixelColor' 'set NeoPixel _ color _' 'num color' 1
  space
  spec 'r' 'colorFromRGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'randomColor' 'random color'
  space
  spec ' ' 'rotateNeoPixelsBy' 'rotate NeoPixels by _' 'auto' 1
  space
  spec ' ' 'NeoPixel_brighten' 'brighten NeoPixel _ by _' 'num num' 1 10
  spec ' ' 'NeoPixel_brighten_all' 'brighten all NeoPixels by _' 'num' 10
  spec ' ' 'NeoPixel_shift_color' 'shift NeoPixel _ color by _' 'num num' 1 10
  spec ' ' 'NeoPixel_shift_all_colors' 'shift all NeoPixel colors by _' 'num' 10
  space
  spec ' ' '_NeoPixel_ensureInitialized' '_NeoPixel_ensureInitialized'
  spec ' ' '_NeoPixel_increaseRGB' '_NeoPixel_increaseRGB of _ by _' 'num num' 1 10
  spec ' ' '_NeoPixel_rotate' '_NeoPixel_rotate_left _' 'bool' true
  spec ' ' '_NeoPixel_update' '_NeoPixel_update'
  spec ' ' '_NeoPixel_shift_hue' '_NeoPixel_shift_hue of _ by _' 'auto auto' '10' '10'

to NeoPixel_brighten i delta {
  '_NeoPixel_increaseRGB' i delta
  '_NeoPixel_update'
}

to NeoPixel_brighten_all delta {
  for i (size _np_pixels) {
    '_NeoPixel_increaseRGB' i delta
  }
  '_NeoPixel_update'
}

to NeoPixel_shift_all_colors delta {
  for i (size _np_pixels) {
    '_NeoPixel_shift_hue' i delta
  }
  '_NeoPixel_update'
}

to NeoPixel_shift_color i delta {
  '_NeoPixel_shift_hue' i delta
  '_NeoPixel_update'
}

to '_NeoPixel_ensureInitialized' {
  if (_np_pixels == 0) {if ((boardType) == 'M5Atom-Matrix') {
    neoPixelAttach 25 '' false
  } ((boardType) == 'D1-Mini') {
    comment 'D1 mini kit'
    neoPixelAttach 7 15 false
  } ((boardType) == 'Mbits') {
    neoPixelAttach 25 '' false
  } else {
    neoPixelAttach 10 '' false
  }}
}

to '_NeoPixel_increaseRGB' i delta {
  if (or (i < 1) (i > (size _np_pixels))) {return}
  local 'rgb' (at i _np_pixels)
  if (rgb != 0) {
    local 'h' ('[misc:hue]' rgb)
    local 's' ('[misc:saturation]' rgb)
    local 'v' (('[misc:brightness]' rgb) + delta)
    v = (maximum 20 (minimum v 100))
    atPut i _np_pixels ('[misc:hsvColor]' h s v)
  }
}

to '_NeoPixel_rotate' left {
  '_NeoPixel_ensureInitialized'
  local 'length' (size _np_pixels)
  if left {
    local 'first' (at 1 _np_pixels)
    for i (length - 1) {
      atPut i _np_pixels (at (i + 1) _np_pixels)
    }
    atPut length _np_pixels first
  } else {
    local 'last' (at length _np_pixels)
    for i (length - 1) {
      atPut ((length - i) + 1) _np_pixels (at (length - i) _np_pixels)
    }
    atPut 1 _np_pixels last
  }
}

to '_NeoPixel_shift_hue' i delta {
  if (or (i < 1) (i > (size _np_pixels))) {return}
  local 'rgb' (at i _np_pixels)
  if (rgb != 0) {
    local 'h' ((('[misc:hue]' rgb) + delta) % 360)
    local 's' ('[misc:saturation]' rgb)
    local 'v' ('[misc:brightness]' rgb)
    atPut i _np_pixels ('[misc:hsvColor]' h s v)
  }
}

to '_NeoPixel_update' {
  '[display:neoPixelSend]' _np_pixels
  waitMicros 300
}

to clearNeoPixels {
  '_NeoPixel_ensureInitialized'
  atPut 'all' _np_pixels 0
  '_NeoPixel_update'
}

to colorFromRGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to neoPixelAttach number pinNumber optionalHasWhite {
  hasWhite = false
  if ((pushArgCount) > 2) {
    hasWhite = optionalHasWhite
  }
  if (or (_np_pixels == 0) (number != (size _np_pixels))) {
    _np_pixels = (newList number)
  }
  atPut 'all' _np_pixels 0
  '[display:neoPixelSetPin]' pinNumber hasWhite
}

to neoPixelSetAllToColor color {
  '_NeoPixel_ensureInitialized'
  atPut 'all' _np_pixels color
  '_NeoPixel_update'
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to rotateNeoPixelsBy n {
  '_NeoPixel_ensureInitialized'
  repeat (absoluteValue n) {
    '_NeoPixel_rotate' (n > 0)
  }
  '_NeoPixel_update'
}

to setNeoPixelColor i color {
  '_NeoPixel_ensureInitialized'
  if (and (1 <= i) (i <= (size _np_pixels))) {
    atPut i _np_pixels color
    '_NeoPixel_update'
  }
}

to setNeoPixelColors10 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 {
  '_NeoPixel_ensureInitialized'
  if ((size _np_pixels) >= 1) {
    atPut 1 _np_pixels c1
  }
  if ((size _np_pixels) >= 2) {
    atPut 2 _np_pixels c2
  }
  if ((size _np_pixels) >= 3) {
    atPut 3 _np_pixels c3
  }
  if ((size _np_pixels) >= 4) {
    atPut 4 _np_pixels c4
  }
  if ((size _np_pixels) >= 5) {
    atPut 5 _np_pixels c5
  }
  if ((size _np_pixels) >= 6) {
    atPut 6 _np_pixels c6
  }
  if ((size _np_pixels) >= 7) {
    atPut 7 _np_pixels c7
  }
  if ((size _np_pixels) >= 8) {
    atPut 8 _np_pixels c8
  }
  if ((size _np_pixels) >= 9) {
    atPut 9 _np_pixels c9
  }
  if ((size _np_pixels) >= 10) {
    atPut 10 _np_pixels c10
  }
  '_NeoPixel_update'
}

