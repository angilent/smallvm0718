module main
author unknown
version 1 0 
description ''
variables screen obstacles obsOK prevObs heliX heliY gameOver toggleOn 

  spec ' ' 'clearC5' 'clearC5'
  spec ' ' 'dispScreen' 'dispLEDs'
  spec ' ' 'genObstacle' 'genObstacle'
  spec 'r' 'screenPtr2RC' 'screenPtr2RC _' 'auto' 10
  spec ' ' 'shiftScreen' 'shiftScreen'
  spec ' ' 'toggleHeli' 'toggleHeli'
  spec 'r' 'crashHeli' 'crashHeli _ _' 'auto auto' 2 3
  spec ' ' 'directions' 'directions'
  spec ' ' 'gameOver' 'gameOver'

to clearC5 {
  comment 'Clear col5'
  atPut 5 screen (booleanConstant true)
  atPut 10 screen (booleanConstant false)
  atPut 15 screen (booleanConstant false)
  atPut 20 screen (booleanConstant false)
  atPut 25 screen (booleanConstant false)
}

to crashHeli x y {
  local 'screenPtr' (((y - 1) * 5) + x)
  if (at screenPtr screen) {
    return (booleanConstant true)
  } else {
    return (booleanConstant false)
  }
}

to directions {
  local 'ms' 200
  '[display:mbDisplayOff]'
  repeat 2 {
    '[display:mbDisplay]' 66624
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  '[display:mbDisplay]' 4347332
  waitMillis 1000
  repeat 2 {
    '[display:mbDisplay]' 278784
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  '[display:mbDisplay]' 4674692
  waitMillis 3000
}

to dispScreen {
  for pos (size screen) {
    comment 'In: 1-25
Out: LED on/off'
    local 'r' ((screenPtr2RC pos) / 10)
    local 'c' ((screenPtr2RC pos) % 10)
    if (at pos screen) {
      '[display:mbPlot]' c r
    } else {
      '[display:mbUnplot]' c r
    }
  }
}

to gameOver {
  gameOver = (booleanConstant true)
  toggleOn = (booleanConstant false)
  local 'ms' 100
  repeat 3 {
    '[display:mbDisplay]' 8554664
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  scroll_text 'GAME Over'
  '[display:mbDisplay]' 2269696
}

to genObstacle {
  comment 'Makes 0-3 down obstacles
at col 5 of screen randomly
0    1    2    3
x    x    x    x
.     .     x   x
.     .     .    x
.     x    .    .
x    x    x    .
Transitions of 1->3 and 3->1
are not allowed'
  local 'obsOK' (booleanConstant false)
  repeatUntil obsOK {
    comment 'Gens obs = 0 - 3'
    local 'obs' ((random 1 10) % 4)
    if (and (prevObs == 1) (obs == 3)) {
      comment 'Not allowed'
    } (and (prevObs == 3) (obs == 1)) {
      comment 'Not allowed'
    } else {
      prevObs = obs
      obsOK = (booleanConstant true)
    }
  }
  clearC5
  for i obs {
    atPut (i * 5) screen (booleanConstant true)
  }
  if (obs == 1) {
    atPut 20 screen (booleanConstant true)
    atPut 25 screen (booleanConstant true)
  } (obs == 2) {
    atPut 25 screen (booleanConstant true)
  }
}

to screenPtr2RC screenPtr {
  comment 'In: 1-25

Out: rc'
  local 'c' (screenPtr % 5)
  local 'r' (screenPtr / 5)
  local 'rc' 0
  if (c == 0) {
    c = 5
  } (c > 0) {
    r += 1
  }
  rc = ((r * 10) + c)
  return rc
}

to shiftScreen {
  comment 'Shift left by 1 col'
  for row 5 {
    for col 4 {
      local 'c' (((row - 1) * 5) + col)
      atPut c screen (at (c + 1) screen)
    }
  }
}

to toggleHeli {
  local 'ms' 50
  forever {
    repeatUntil (not toggleOn) {
      '[display:mbPlot]' heliX heliY
      waitMillis ms
      '[display:mbUnplot]' heliX heliY
      if (buttonA) {
        waitMillis ms
        heliY += -1
      } (buttonB) {
        waitMillis ms
        heliY += 1
      }
      if (crashHeli heliX heliY) {
        gameOver
      }
      waitMillis ms
    }
  }
}

script 47 43 {
comment 'Game contributed by Turgut Guneysu
============================

microHELI:

This is the micro version of the popular Helicopter game.
One flies the Heli through a corridor of obstacles hanging
from the ceiling and rising from the ground.

Use buttonA to RAISE the Heli
Use button B to LOWER the Heli

That''s it !

Have Fun.'
}

script 52 312 {
whenStarted
screen = (newList 25)
atPut 'all' screen (booleanConstant false)
prevObs = 0
heliX = 2
heliY = 3
gameOver = (booleanConstant false)
toggleOn = (booleanConstant false)
directions
'[display:mbDisplayOff]'
toggleOn = (booleanConstant true)
repeatUntil gameOver {
  genObstacle
  shiftScreen
  clearC5
  dispScreen
  waitMillis 400
}
}

script 371 312 {
whenStarted
toggleHeli
}


module 'LED Display' Output
author MicroBlocks
version 1 8 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec ' ' '_set display color' 'set display color _' 'color'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to '_set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}

